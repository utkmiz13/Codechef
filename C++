# C++ Programming - Complete Beginner's Notes

## What is C++?
C++ is a powerful, general-purpose programming language developed by Bjarne Stroustrup in 1979. It's an extension of the C programming language, hence the name "C++". It's widely used for system programming, game development, embedded systems, and high-performance applications.

## Why Learn C++?
- **Fast execution**: C++ is a compiled language that runs very fast
- **Memory control**: Direct control over memory management
- **Object-oriented**: Supports classes and objects
- **Versatile**: Used in games, operating systems, databases, web browsers
- **Foundation**: Understanding C++ makes learning other languages easier

## Getting Started

### Development Environment
You need:
1. **Text Editor/IDE**: Visual Studio, Code::Blocks, Dev-C++, or VS Code
2. **Compiler**: GCC, Clang, or MSVC
3. **Online options**: Replit, OnlineGDB for practice

### Your First C++ Program

```cpp
#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World!" << endl;
    return 0;
}
```

**Explanation:**
- `#include <iostream>`: Includes input/output stream library
- `using namespace std;`: Allows us to use cout without std:: prefix
- `int main()`: Main function where program execution begins
- `cout`: Used to output text to screen
- `endl`: Ends the line (like pressing Enter)
- `return 0;`: Indicates successful program termination

## Basic Structure of C++ Program

```cpp
// Comments start with //
/* Multi-line comments
   look like this */

#include <header_files>    // Preprocessor directives
using namespace std;       // Namespace declaration

int main() {              // Main function
    // Your code here
    return 0;             // Return statement
}
```

## Variables and Data Types

### What are Variables?
Variables are containers that store data values. Think of them as labeled boxes that hold information.

### Basic Data Types

| Data Type | Size | Range | Example |
|-----------|------|-------|---------|
| `int` | 4 bytes | -2,147,483,648 to 2,147,483,647 | `int age = 25;` |
| `float` | 4 bytes | 6-7 decimal digits | `float price = 19.99;` |
| `double` | 8 bytes | 15-17 decimal digits | `double pi = 3.14159265;` |
| `char` | 1 byte | Single character | `char grade = 'A';` |
| `bool` | 1 byte | true or false | `bool isStudent = true;` |
| `string` | Variable | Text | `string name = "John";` |

### Variable Declaration and Initialization

```cpp
// Declaration
int number;
float salary;
char letter;

// Initialization
number = 42;
salary = 50000.5;
letter = 'X';

// Declaration + Initialization
int score = 100;
string message = "Hello";
bool isActive = false;
```

### Variable Naming Rules
- Must start with letter or underscore
- Can contain letters, numbers, underscores
- Cannot use C++ keywords (int, float, etc.)
- Case-sensitive (age ≠ Age)

**Good names:** `studentAge`, `total_score`, `userName`
**Bad names:** `2age`, `float`, `student age`

## Input and Output

### Output with cout
```cpp
cout << "Hello World";           // Print text
cout << 42;                      // Print number
cout << "Age: " << 25;          // Print multiple items
cout << "Line 1" << endl << "Line 2";  // Multiple lines
```

### Input with cin
```cpp
int age;
string name;

cout << "Enter your name: ";
cin >> name;                     // Read single word

cout << "Enter your age: ";
cin >> age;                      // Read number

// For full lines with spaces
getline(cin, name);             // Read entire line
```

### Example Program
```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
    string name;
    int age;
    
    cout << "What's your name? ";
    getline(cin, name);
    
    cout << "How old are you? ";
    cin >> age;
    
    cout << "Hello " << name << "! You are " << age << " years old." << endl;
    
    return 0;
}
```

## Operators

### Arithmetic Operators
```cpp
int a = 10, b = 3;

cout << a + b;    // Addition: 13
cout << a - b;    // Subtraction: 7
cout << a * b;    // Multiplication: 30
cout << a / b;    // Division: 3 (integer division)
cout << a % b;    // Modulus (remainder): 1
```

### Assignment Operators
```cpp
int x = 5;
x += 3;    // x = x + 3, now x = 8
x -= 2;    // x = x - 2, now x = 6
x *= 4;    // x = x * 4, now x = 24
x /= 3;    // x = x / 3, now x = 8
x %= 3;    // x = x % 3, now x = 2
```

### Increment/Decrement
```cpp
int count = 5;
count++;    // Post-increment: count = 6
++count;    // Pre-increment: count = 7
count--;    // Post-decrement: count = 6
--count;    // Pre-decrement: count = 5
```

### Comparison Operators
```cpp
int x = 5, y = 3;

x == y     // Equal to: false
x != y     // Not equal: true
x > y      // Greater than: true
x < y      // Less than: false
x >= y     // Greater than or equal: true
x <= y     // Less than or equal: false
```

### Logical Operators
```cpp
bool a = true, b = false;

a && b     // AND: false (both must be true)
a || b     // OR: true (at least one must be true)
!a         // NOT: false (opposite of a)
```

## Control Structures

### If-Else Statements
```cpp
int score = 85;

if (score >= 90) {
    cout << "Grade: A";
} else if (score >= 80) {
    cout << "Grade: B";
} else if (score >= 70) {
    cout << "Grade: C";
} else {
    cout << "Grade: F";
}
```

### Switch Statement
```cpp
char grade = 'B';

switch (grade) {
    case 'A':
        cout << "Excellent!";
        break;
    case 'B':
        cout << "Good job!";
        break;
    case 'C':
        cout << "Fair";
        break;
    default:
        cout << "Invalid grade";
}
```

## Loops

### For Loop
```cpp
// Print numbers 1 to 5
for (int i = 1; i <= 5; i++) {
    cout << i << " ";
}
// Output: 1 2 3 4 5
```

### While Loop
```cpp
int count = 1;
while (count <= 5) {
    cout << count << " ";
    count++;
}
// Output: 1 2 3 4 5
```

### Do-While Loop
```cpp
int num;
do {
    cout << "Enter a positive number: ";
    cin >> num;
} while (num <= 0);
```

## Arrays

### What are Arrays?
Arrays store multiple values of the same type in a single variable.

```cpp
// Declaration
int numbers[5];              // Array of 5 integers

// Declaration with initialization
int scores[5] = {85, 92, 78, 96, 88};
string names[3] = {"Alice", "Bob", "Charlie"};

// Accessing elements (0-indexed)
cout << scores[0];           // Prints 85
scores[1] = 95;              // Changes second element to 95
```

### Array Example
```cpp
#include <iostream>
using namespace std;

int main() {
    int numbers[5] = {10, 20, 30, 40, 50};
    
    // Print all elements
    for (int i = 0; i < 5; i++) {
        cout << "Element " << i << ": " << numbers[i] << endl;
    }
    
    return 0;
}
```

## Functions

### What are Functions?
Functions are reusable blocks of code that perform specific tasks.

### Basic Function Structure
```cpp
return_type function_name(parameters) {
    // Function body
    return value;  // if return_type is not void
}
```

### Examples
```cpp
// Function that returns nothing
void greet() {
    cout << "Hello, World!" << endl;
}

// Function that returns a value
int add(int a, int b) {
    return a + b;
}

// Function with default parameter
void introduce(string name, int age = 18) {
    cout << "My name is " << name << " and I'm " << age << " years old." << endl;
}

int main() {
    greet();                    // Call greet function
    int sum = add(5, 3);        // Call add function
    introduce("Alice");         // Uses default age
    introduce("Bob", 25);       // Provides both parameters
    
    return 0;
}
```

## Common Beginner Mistakes

1. **Missing semicolons**: Every statement must end with `;`
2. **Case sensitivity**: `cout` ≠ `Cout`
3. **Array bounds**: Arrays start at index 0, not 1
4. **Uninitialized variables**: Always initialize variables before using
5. **Integer division**: `5/2 = 2` (not 2.5) in integer division

## Practice Exercises

### Exercise 1: Calculator
Write a program that takes two numbers and an operator (+, -, *, /) and performs the calculation.

### Exercise 2: Grade Calculator
Create a program that calculates the average of 5 test scores and displays the letter grade.

### Exercise 3: Number Guessing Game
Write a program where the computer picks a random number and the user tries to guess it.

### Exercise 4: Factorial Calculator
Create a function that calculates the factorial of a number using loops.

## Next Steps
After mastering these basics, you can learn:
- Pointers and References
- Classes and Objects (Object-Oriented Programming)
- File Handling
- Exception Handling
- Standard Template Library (STL)
- Advanced Data Structures

## Quick Reference

### Essential Headers
```cpp
#include <iostream>     // For cin, cout
#include <string>       // For string operations
#include <cmath>        // For mathematical functions
#include <vector>       // For dynamic arrays
#include <algorithm>    // For sorting, searching
```

### Common Functions
```cpp
// Math functions (need #include <cmath>)
sqrt(25)        // Square root: 5
pow(2, 3)       // Power: 8
abs(-5)         // Absolute value: 5

// String functions
string str = "Hello";
str.length()    // Length: 5
str.substr(1, 3)// Substring: "ell"
```

Remember: Practice is key to learning programming. Start with simple programs and gradually work on more complex projects!
